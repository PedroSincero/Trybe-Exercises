import requests
import time

for _ in range(15):
  response = requests.get("https://www.cloudflare.com/rate-limit-test")
  print(response.status_code)
  time.sleep(6)

try:
  response = requests.get("https://httpbin.org/delay/10", timeout=2)
except requests.Timeout:
  response = requests.get("https://httpbin.org/delay/10", timeout=15)
finally:
  print(response.status_code)


# Rate Limit
# Muitas vezes a p√°gina de onde estamos removendo o conte√∫do possui uma limita√ß√£o de quantas requisi√ß√µes podemos enviar em um curto per√≠odo de tempo, evitando assim ataques de nega√ß√£o de servi√ßo.
# Isto pode nos levar a ficarmos bloqueados por um curto per√≠odo de tempo ou at√© mesmo banidos de acessar um recurso.
# Que tal vermos um exemplo?
import requests


# √Ä partir da d√©cima requisi√ß√£o somos bloqueados de acessar o recurso
# C√≥digo de status 429: Too Many Requests
for _ in range(15):
    response = requests.get("https://www.cloudflare.com/rate-limit-test/")
    print(response.status_code)

# Uma boa pr√°tica √© sempre colocarmos um uma pausa entre as requisi√ß√µes, ou lote delas, mesmo que o website, onde a informa√ß√£o est√°, n√£o fa√ßa o bloqueio, assim evitamos tirar o site do ar.
import requests
import time


# Coloca uma pausa de 6 segundos a cada requisi√ß√£o
# Obs: este site de exemplo tem um rate limit de 10 requisi√ß√µes por minuto
for _ in range(15):
    response = requests.get("https://www.cloudflare.com/rate-limit-test/")
    print(response)
    time.sleep(6)

# Timeout

# √Ås vezes pedimos um recurso ao servidor, mas caso o nosso tr√°fego de rede esteja lento ou tenha um problema interno do servidor, nossa resposta pode demorar ou at√© mesmo ficar travada indefinidamente.
# Como garantir, ap√≥s um tempo, que o recurso seja retornado? ü§î
import requests

# Por 10 segundos n√£o temos certeza se a requisi√ß√£o ir√° retornar
response = requests.get("https://httpbin.org/delay/10")
print(response)

# Podemos definir um tempo limite (timeout) para que, ap√≥s este tempo, possamos tomar alguma atitude como por exemplo, realizar uma nova tentativa.
# Este tempo limite normalmente √© definido atrav√©s de experimenta√ß√µes e an√°lise do tempo de resposta normal de uma requisi√ß√£o.

import requests


try:
    # recurso demora muito a responder
    response = requests.get("http://httpbin.org/delay/10", timeout=2)
except requests.ReadTimeout:
    # vamos fazer uma nova requisi√ß√£o
    response = requests.get("http://httpbin.org/delay/1", timeout=2)
finally:
    print(response.status_code)
# No exemplo acima, para efeitos did√°ticos, modificamos a URI do recurso, diminuindo o delay de resposta da requisi√ß√£o, atrav√©s do timeout , por√©m normalmente este valor n√£o muda.

db.sales.insertMany([
{
  _id: 1,
  item: "Código Limpo",
  price: NumberDecimal("10"),
  quantity: NumberInt("2"),
  date: ISODate("2014-03-01T08:00:00Z")
},
{
  _id: 2,
  item: "O Homem e Seus Símbolos",
  price: NumberDecimal("20"),
  quantity: NumberInt("1"),
  date: ISODate("2014-03-01T09:00:00Z")
},
{
  _id: 3,
  item: "Comunicação Não-Violenta",
  price: NumberDecimal("5"),
  quantity: NumberInt( "10"),
  date: ISODate("2014-03-15T09:00:00Z")
},
{
  _id: 4,
  item: "Comunicação Não-Violenta",
  price: NumberDecimal("5"),
  quantity:  NumberInt("20"),
  date: ISODate("2014-04-04T11:21:39.736Z")
},
{
  _id: 5,
  item: "Código Limpo",
  price: NumberDecimal("10"),
  quantity: NumberInt("10"),
  date: ISODate("2014-04-04T21:23:13.331Z")
},
{
  _id: 6,
  item:"A Coragem de Ser Imperfeito",
  price: NumberDecimal("7.5"),
  quantity: NumberInt("5" ),
  date: ISODate("2015-06-04T05:08:13Z")
},
{
  _id: 7,
  item: "A Coragem de Ser Imperfeito",
  price: NumberDecimal("7.5"),
  quantity: NumberInt("10"),
  date: ISODate("2015-09-10T08:43:00Z")
},
{
  _id: 8,
  item: "Código Limpo",
  price: NumberDecimal("10"),
  quantity: NumberInt("5" ),
  date: ISODate("2016-02-06T20:20:13Z")
}
]);

// Exemplo 1: Contando o número de documentos
// Você pode utilizar o operador $group para contar o número de documentos da coleção sales :
use ('test');
db.sales.aggregate([
  {
$group: {
      _id: null,
      count: { $sum: 1 }
    }
  }
]);

// Exemplo 2: Retornando valores distintos
// O operador $group também pode ser utilizado para encontrar os valores distintos de um campo. Por exemplo, se quiser saber todos os valores únicos do campo item e quantos são, faça como o exemplo seguinte:
use ('test');
db.sales.aggregate([
  {
$group : {
      _id : "$item",
      count: { $sum: 1}
    }
  }
]);
// Note que o campo deve ser precedido de $

// Exemplo 3: Somando valores
// Para saber o valor das vendas, você deve utilizar o operador $sum , que, por sua vez, aceita mais modificadores. No exemplo que se segue, multiplica-se o valor do campo price pelo valor do campo quantity :
use ('test');
db.sales.aggregate([
  {
$group : {
      _id : "$item",
      totalSaleAmount: {
$sum: {
$multiply: ["$price", "$quantity"]
        }
      }
    }
  }
]);

// Exemplo 4: Having (do Mysql), combinando estágios no aggregate
// Também é possível realizar operações equivalentes ao HAVING do SQL , que nada mais é que um filtro depois de um agrupamento. Por exemplo, se você quiser manter o agrupamento anterior, mas saber apenas as vendas que possuem valores maiores do que 100 , é só adicionar mais um estágio no pipeline :
use ('test');
db.sales.aggregate([
  // Primeiro Estágio
  {
$group: {
      _id : "$item",
      totalSaleAmount: {
$sum: {
$multiply: ["$price", "$quantity"]
        }
      }
    }
  },
  // Segundo Estágio
  {
$match: { "totalSaleAmount": { $gte: 100 } }
  }
]);

// Exemplo 5: Agrupando por null
// Você pode executar operações matemáticas em todos os documentos de uma coleção. Basta passar null no _id e seguir com os operadores de acumulação.
// No exemplo a seguir, a operação de agregação retornará um documento com o valor total da venda, a quantidade média de itens vendidos e o total de vendas:
use ('test');
db.sales.aggregate([
  {
$group : {
      _id : null,
      totalSaleAmount: {
$sum: { $multiply: ["$price", "$quantity"] }
      },
      averageQuantity: { $avg: "$quantity" },
      count: { $sum: 1 }
    }
  }
]);

// Utilizando o banco de dados agg_example e a coleção transactions , faça os exercícios:

// 1 - Selecione todos os bancos, ou seja, valores do campo bank ;
use ('test');
db.transactions.aggregate([
{
  $group: {
    _id: "$bank",
    count: { $sum: 1}
  }
}
]);
// 2 - Selecione o valor total das transações em cada banco e quantas são;
use ('test');
db.transactions.aggregate([
{
  $group: {
    _id: "$bank",
    total: { $sum: "$value"},
    transactions: { $sum: 1},
  }
}
]);
// 3 - Selecione o valor total de transações;
use ('test');
db.transactions.aggregate([
{
  $group: {
    _id: "$bank",
    total: { $sum: "$value"}
  }
}
]);
// 4 - Selecione os bancos que têm o valor total de transações maior que 1000.
use ('test');
db.transactions.aggregate([
  {
    $match: {
      value: {
        $gt: 1000
      }
    }
  },
{
  $group: {
    _id: "$bank",
    total: {
      $sum: "$value"
    }
  }
}
]);

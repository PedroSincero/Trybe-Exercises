# # Beleza! Vamos resumir o que vimos atÃ© aqui:
# A Ordem de Complexidade diz o quanto o tempo de execuÃ§Ã£o (ou espaÃ§o de memÃ³ria ocupado) de um algoritmo cresce, na medida em que aumentamos o tamanho da sua entrada!
# Uma O(1) executa no mesmo tempo independente do tamanho da entrada. Como exemplo, lembre-se do acesso a um elemento do array , estudado na aula de ontem. Esse acesso Ã© O(1) , pois leva o mesmo tempo, independente do tamanho do array;
# Uma O(n) significa que o algoritmo Ã© linear : se aumentamos a entrada em 2 vezes , aumentamos o tempo de execuÃ§Ã£o em 2 vezes ;
# Uma O(nÂ²) significa que o algoritmo Ã© quadrÃ¡tico : se aumentamos a entrada em 2 vezes , aumentamos o tempo de execuÃ§Ã£o em 4 (2Â²) vezes ;
# Uma O(nÂ³) significa que o algoritmo Ã© cÃºbico : se aumentamos a entrada em 2 vezes , aumentamos o tempo de execuÃ§Ã£o em 8 (2Â³) vezes .

# Falamos aqui de algoritmos O(n) , O(nÂ²) e atÃ© de O(nÂ³) , mas vamos mostrar o que eles significam de outra forma.

# Para se ter uma noÃ§Ã£o, pense assim: para um algoritmo linear, com n = 1000 temos mil operaÃ§Ãµes. Quando o algoritmo Ã© O(nÂ²) um n = 1000 gera um milhÃ£o de operaÃ§Ãµes . Essa mesma quantidade (um milhÃ£o) para O(nÂ³) , se atinge com n = 100 . EstÃ¡ comeÃ§ando a entender como alguns algoritmos podem, rapidinho, ficar inviÃ¡veis de se executar?
# A seguir, vamos explorar outros tipos de complexidades de algoritmos!
# ğŸ’¡ Lembre-se! Se vocÃª se embananar com essa quantidade de nÃºmeros, rode exemplos na sua mÃ¡quina contando o nÃºmero de iteraÃ§Ãµes! Ã‰ uma excelente forma de visualizar a complexidade acontecendo. E nÃ£o deixe de falar com a gente no Slack se algum exemplo estiver te confundindo!
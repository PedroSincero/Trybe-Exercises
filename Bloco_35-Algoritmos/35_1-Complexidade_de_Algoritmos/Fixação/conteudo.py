def sum_array(numbers):
    sum = 0
    for number in numbers:
            sum += number

    return sum

# Quanto tempo ele vai demorar para executar? üòÅ
# "Ora, imposs√≠vel dizer!", diz a pessoa incr√©dula. Depende da m√°quina, do que est√° rodando nela, dos recursos, de tudo! N√£o d√° pra dizer.
# Ok. Trave todas as configura√ß√µes. √â uma m√°quina padronizada, sem mais nada rodando, tudo certo. Quanto tempo ele vai demorar para executar? Um segundo? Dez segundos?
# ... Tem mais um "depende" aqui, n√£o tem? O tempo de execu√ß√£o depende do tamanho do array passado por par√¢metro! Quanto maior o dado passado por par√¢metro, mais o algoritmo demorar√° para executar .
# Hmmm. Legal! Vamos usar isso ent√£o! Eu n√£o sei quanto tempo o algoritmo vai demorar para executar: dependem de in√∫meros fatores al√©m do meu controle. Mas uma coisa eu tenho certeza: o tempo de execu√ß√£o dele √© proporcional ao tamanho do meu dado entrado! Por exemplo:

# def sum_array(numbers):
  # ...

# Suponha que, para o array abaixo, o tempo de execu√ß√£o seja `n`
sum_array(array_com_dez_mil_numeros)

# Nesse caso, aqui o tempo de execu√ß√£o vai ser `10 * n`, ou `10n`, j√° que o array √© dez vezes maior que o anterior!
sum_array(array_com_cem_mil_numeros)

# J√° esse √© dez mil vezes maior que o primeiro, ent√£o esse aqui executa em `100n`
sum_array(array_com_um_milh√£o_de_numeros)

# Pois bem!! A todas e a todos eu tenho o orgulho de apresentar a Ordem de Complexidade ! Mas o que raios √© isso?! √â o quanto que o tempo de execu√ß√£o do algoritmo varia na medida em que a entrada cresce! Observe:

# def sum_array(numbers):
  # ...

sum_array(array_com_dez_mil_numeros)
# O tempo de execu√ß√£o deste algoritmo foi 0.0004s

sum_array(array_com_cem_mil_numeros)
# Para uma execu√ß√£o com dez vezes mais n√∫meros, o tempo aumentou em dez vezes: 0.004s

sum_array(array_com_um_milh√£o_de_numeros)
# Multiplicando o tamanho da entrada por dez novamente, temos um tempo dez vezes maior: 0.05s

# Fa√ßa o teste na sua m√°quina (voc√™ j√° tem os conhecimentos para descobrir como fazer um script que mede esses tempos üöÄ). Os valores podem variar, mas as propor√ß√µes n√£o! Um aumento no tamanho da entrada aumenta o tempo de execu√ß√£o na mesma propor√ß√£o. Se fiz√©ssemos um gr√°fico disso, ele seria assim:

# A Ordem de Complexidade nada mais √© do que a representa√ß√£o dessa propor√ß√£o! Dado que o algoritmo √© linearmente proporcional ao tempo de execu√ß√£o (ou seja, se a entrada aumenta em 10 vezes o tempo de execu√ß√£o tamb√©m aumenta em 10 vezes), dizemos que este √© um algoritmo linear!
# A fun√ß√£o matem√°tica que representa uma rela√ß√£o linear √© f(n) = n . Na nota√ß√£o de Ordem de Complexidade, dizemos que esse algoritmo √© O(n) ! Guardem essa nota√ß√£o, vamos us√°-la bastante!
# üí° A Ordem de Complexidade pode ser chamada, tamb√©m, de Complexidade Assint√≥tica.
# Calma! Apesar do termo potencialmente assustador, a complexidade logar√≠tmica n√£o exige c√°lculos matem√°ticos complicados para ser entendida. Dado pela nota√ß√£o O(log n) , um algoritmo logar√≠tmico geralmente reduz pela metade o tamanho do input a cada itera√ß√£o.
# O tempo de execu√ß√£o de um algoritmo √© dito logar√≠tmico porque log‚ÇÇn (l√™-se: "log de n na base 2") nos d√° o n√∫mero de itera√ß√µes que uma entrada de tamanho n ter√° no algoritmo.
# No exemplo a seguir temos um algoritmo de busca bin√°ria. Dado um array de tamanho n ordenado em ordem crescente, encontre um n√∫mero passado na entrada . √â como procurar por um nome numa lista telef√¥nica!

# Como voc√™ faz? Suponha que voc√™ quer procurar pelo nome Tintim .
# Voce ir√° escolher uma p√°gina do livro para abrir;
# Percebe que caiu no bloco de letra M ;
# Como M < T na ordem alfab√©tica, ent√£o voce deve avan√ßar alguns blocos;
# Escolhe uma p√°gina que est√° adiante;
# Percebe que caiu no bloco de letra V ;
# Como V > T , ent√£o voce deve voltar alguns blocos;
# Repita esse processo at√© encontrar o nome desejado.

# Se quiser rodar seus pr√≥prios testes, o algoritmo de busca bin√°ria √© o abaixo:

# A estrutura deve estar ordenada para que a busca bin√°ria funcione
data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

def binary_search_iterative(array, element):
    mid = 0
    start = 0
    end = len(array)
    step = 0

    while (start <= end):
        print("Subarray in step {}: {}".format(step, str(array[start: end + 1])))
        step = step + 1
        mid = (start + end) // 2

        if element == array[mid]:
            return mid

        if element < array[mid]:
            end = mid - 1
        else:
            start = mid + 1

    return - 1


print(binary_search_iterative(data, 2))

# Observe como, a cada itera√ß√£o, o algoritmo de busca bin√°ria corta o problema pela metade: primeiro ele corta a lista em dois e pega o elemento do meio. Depois ele vai para o lado onde o elemento que procura est√° e corta este lado novamente pela metade. Quando cortamos a entrada pela metade, a cada itera√ß√£o, temos um padr√£o que segue a fun√ß√£o matem√°tica de logaritmo na base dois! Assim, nosso algoritmo √© O(log n) .
# Um logaritmo em base 2 representa o n√∫mero de vezes que um valor deve ser dividido pela metade para obter 1.
# Dessa forma, sem precisarmos nos aprofundar na matem√°tica, conseguimos calcular a ordem de complexidade de um algoritmo deste tipo! Quando a entrada √© cortada pela metade a cada itera√ß√£o temos um comportamento logar√≠tmico!

# Para fixar um pouco, vamos fazer um exerc√≠cio:
# Exerc√≠cios de Fixa√ß√£o
# Exerc√≠cio 4: Imagine que voc√™ recebe dois arrays de tamanho igual, array1 e array2 . Para cada elemento do array1 , realize uma busca bin√°ria no array2 . Mostre que a ordem de complexidade do algoritmo resultante √© O(n * log n) , ou O(n log n) .
# üí° N√£o precisa implementar o c√≥digo aqui!

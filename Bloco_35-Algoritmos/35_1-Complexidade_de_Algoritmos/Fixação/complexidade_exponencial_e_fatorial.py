# Essas complexidades caracterizam algoritmos que, para aumentos pequenos no tamanho da entrada, aumentam enormemente o seu tempo de execu√ß√£o. A rela√ß√£o do tempo de execu√ß√£o/espa√ßo ocupado em cada caso √© a seguinte:
# Exponencial: 2‚Åø ;
# Fatorial: n! .
# No caso exponencial, se n possui vinte elementos, o algoritmo faz um milh√£o de opera√ß√µes. Para o caso fatorial, os mesmos vinte elementos rendem 24 quatrilh√µes de opera√ß√µes (O n√∫mero exato √©: 2432902008176640000 opera√ß√µes üò®).
# Da√≠ vem a pergunta: porque algu√©m iria escrever um algoritmo de complexidade fatorial?! A resposta √© simples: quando n√£o h√° outro algoritmo conhecido que resolve o problema. Quer conhecer um cl√°ssico? Eis o problema do caixeiro viajante ! Seu enunciado √©: "Dada uma lista de cidades e a dist√¢ncia entre cada par de cidades, qual √© a rota mais curta poss√≠vel que visita todas as cidades exatamente uma vez e volta para a cidade de origem?"
# A √∫nica solu√ß√£o exata conhecida para este problema √© a for√ßa bruta . Ou seja: voc√™ testa todas as possibilidades. Imagine que voc√™ tem tr√™s cidades: Belo Horizonte, S√£o Paulo e Florian√≥polis. Temos as seguintes rotas poss√≠veis, basta list√°-las e escolher a mais curta:

# - Belo Horizonte > S√£o Paulo > Florian√≥polis

# - Belo Horizonte > Florian√≥polis > S√£o Paulo

# - Florian√≥polis > Belo Horizonte > S√£o Paulo

# - Florian√≥polis > S√£o Paulo > Belo Horizonte

# - S√£o Paulo > Belo Horizonte > Florian√≥polis

# - S√£o Paulo > Florian√≥polis > Belo Horizonte

# P = NP 

# O n√∫mero de rotas para 3 cidades √© 3! == 3 * 2 * 1 = 6 . Atualmente o Brasil tem 5570 munic√≠pios. Isso daria 5570 * 5569 * 5568 * ... . Quantos milhares de anos um computador precisaria para rodar esse algoritmo nesse caso? üòÑ
# Algoritmos que n√£o tem solu√ß√£o conhecida em tempo polinomial, ou seja, que s√£o fatoriais ou exponenciais , resolv√≠veis somente com for√ßa bruta, pertencem a uma categoria de problemas na computa√ß√£o chamada problemas NP Completos . Se quiser conhecer mais sobre essa categoria de problemas, explore nossos recursos adicionais!
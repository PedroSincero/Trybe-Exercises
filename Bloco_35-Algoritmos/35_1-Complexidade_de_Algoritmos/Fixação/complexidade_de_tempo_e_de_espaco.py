def squared_array(numbers):
    array_of_squares = []
    for number in numbers:
            array_of_squares.append(number * number)

    return array_of_squares

# Para o algoritmo acima, aumentar a entrada em dez vezes aumenta em dez vezes o tempo de execu√ß√£o! A sua ordem de complexidade, portanto, √© O(n) . Na maior parte das vezes em que falarmos de Ordem de Complexidade, estamos falando disso: do tempo que o algoritmo vai demorar para executar, ou complexidade de tempo . H√° tamb√©m uma outra complexidade: a complexidade de espa√ßo , se referindo ao espa√ßo em mem√≥ria que o algoritmo ocupa.
# A ideia √© a mesma: na medida em que a entrada aumenta, quanto o espa√ßo em mem√≥ria usado pelo algoritmo aumenta? No exemplo acima, o algoritmo povoa e retorna um array de tamanho n , sendo n o tamanho do array entrado, e o retorna. Assim sendo, sua complexidade de espa√ßo √© O(n) !

# üí° Se falamos em Ordem de Complexidade sem especificar se √© de tempo ou de mem√≥ria, assuma que √© de tempo!

# Mas e o outro exemplo, o do algoritmo sum_array() ?! Nesse caso, ele s√≥ precisa do espa√ßo, em mem√≥ria, de um n√∫mero para executar. Para qualquer tamanho de entrada ele ocupa a mesma quantidade de espa√ßo para executar. Assim sendo, sua complexidade de espa√ßo √© constante . Uma complexidade, seja de mem√≥ria ou de tempo, ser constante, significa que o tamanho da entrada n√£o influi no tempo de execu√ß√£o/mem√≥ria ocupada de um algoritmo. A nota√ß√£o para esta complexidade √© O(1)
# üí° Quando calculamos a complexidade de espa√ßo n√£o levamos em considera√ß√£o o espa√ßo ocupado pela entrada! O tamanho da entrada n√£o √© algo que podemos, com nosso algoritmo, influenciar, ent√£o ele n√£o entra em nossos c√°lculos.

# Exerc√≠cios de Fixa√ß√£o
# Exerc√≠cio 1: Qual a Ordem de Complexidade (complexidade de tempo) do algoritmo abaixo? E a complexidade de espa√ßo?

# Complexidade de Espa√ßo: O(1)
# Complexidade de Tempo : O(n)
def multiply_array(numbers):
  # O, 1 result
    result = 0 
    # N
    for number in numbers:
            result *= number

    return result
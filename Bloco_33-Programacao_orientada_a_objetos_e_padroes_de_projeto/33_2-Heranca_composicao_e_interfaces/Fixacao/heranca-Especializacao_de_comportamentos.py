# N√≥s queremos estender nosso c√≥digo sem modificar o que j√° existe . Leia o c√≥digo abaixo! Ele faz a mesma coisa que o c√≥digo anterior, mas est√° refatorado. Ele usa, para resolver o nosso problema, os conceitos de classes abstratas, m√©todos abstratos e o conceito de heran√ßa .

from abc import ABC, abstractmethod
import json
from csv import DictWriter

class SalesReport(ABC):
    def __init__(self, export_file):
        self.export_file = export_file

    def build(self):
        return [{
                'Coluna 1': 'Dado 1',
                'Coluna 2': 'Dado 2',
                'Coluna 3': 'Dado 3'
                },
                {
                'Coluna 1': 'Dado A',
                'Coluna 2': 'Dado B',
                'Coluna 3': 'Dado C'
                }]

    @abstractmethod
    def serialize(self):
        raise NotImplementedError


class SalesReportJSON(SalesReport):
    def serialize(self):
        with open(self.export_file + '.json', 'w') as file:
            json.dump(self.build(), file)


# üí° Como boa pr√°tica, cada classe deve ser definida em seu pr√≥prio arquivo! Para nossos exerc√≠cios isso n√£o √© necess√°rio
# Heran√ßa nada mais √© do que especializar o comportamento de uma classe. A classe herdeira √© tudo que a classe ascendente √© e um pouco mais! Pense assim:
# Se FileCompressor √© a classe ascendente, ZipFileCompressor e TarFileCompressor s√£o classes herdeiras! Ambas s√£o um tipo espec√≠fico de compressor de arquivos.
# Se DatabaseConnector √© a classe ascendente, MySQLConnector e MongoConnector s√£o as classes herdeiras! Ambas s√£o um tipo espec√≠fico de conector de banco de dados.
# Se Model √© a classe ascendente, UserModel √© a classe herdeira! √â um tipo espec√≠fico de model .
# Se Service √© a classe ascendente, AuthenticationService √© a classe herdeira! √â um tipo espec√≠fico de service .
# üí° Lembre-se: O Model Service Controller √© uma arquitetura que usa como base a Programa√ß√£o Orientada a Objetos!
# A Programa√ß√£o Orientada a Objetos, portanto, te d√° o poder de criar classes herdeiras que especializam, mais e mais, o comportamento das classes ascendentes! N√£o h√° limite pra quantidade de classes herdeiras que uma classe pode ter, mas √© crucial que tais classes sempre sejam uma especializa√ß√£o de comportamento! J√° j√° vamos ver o porqu√™.
# No Python, definimos uma classe como herdeira da outra na linha que a define, como acima em class SalesReportJSON(SalesReport) . A l√≥gica √©: class MinhaClasseHerdeira(ClasseAscendente)

# Exerc√≠cio de Fixa√ß√£o
# Antes de prosseguirmos para entender o que √© aquele @abstractmethod e aquele (ABC) , vamos fixar o entendimento de heran√ßa! Implemente uma classe SalesReportCSV que seja herdeira da classe SalesReport , da mesma forma que fizemos com a SalesReportJSON . Para testar seu funcionamento, instancie-a e chame sua fun√ß√£o serialize .

class SalesReportCSV(SalesReport):
    def serialize(self):
      with open(self.export_file + '.csv', 'w') as file:
        headers = ['Coluna 1', 'Coluna 2', 'Coluna 3']
        csv_writer = DictWriter(file, headers)
        csv_writer.writeheader()
        for item in self.build():
          csv_writer.writerow(item)

relatorio_de_vendas = SalesReportJSON('meu_relatorio')
relatorio_de_vendas.serialize()

relatorio_de_compras = SalesReportCSV('meu_relatorio')
relatorio_de_compras.serialize()

# https://dictionary.cambridge.org/pt/dicionario/ingles/serialization
# Serializar √© o processo de mudar o formato dos seus dados para que possam ser armazenados ou enviados para serem, depois, convertidos de volta √† sua forma original
# Quem nunca arrumou um problema em um c√≥digo e acabou fazendo-o deixar de funcionar para outro cen√°rio? Ou ficou horas testando as mais diversas condi√ß√µes para um algoritmo e no meio do caminho teve de mexer no c√≥digo e recome√ßar tudo novamente. üòÅ
# Atrav√©s de testes automatizados, a pessoa desenvolvedora √© capaz de identificar mais facilmente um bug ou verificar que altera√ß√µes do c√≥digo n√£o afetaram o comportamento esperado do sistema.
# Em nosso curso utilizaremos a biblioteca pytest , um framework que facilita a escrita de testes simples, mas capazes de testar funcionalidades complexas em aplica√ß√µes e bibliotecas.

# üìù Que tal vermos um exemplo?
# codigo.py
def is_odd(number):
    'Retorna True se um n√∫mero √© √≠mpar, sen√£o False.'
    return number % 2 != 0

# test_codigo.py
from codigo import is_odd


def test_is_odd_when_number_is_odd_returns_true():
    'Para um n√∫mero √≠mpar a fun√ß√£o deve retornar o valor True'
    assert is_odd(3) is True


def test_is_odd_when_number_is_even_returns_false():
    'Para um n√∫mero par a fun√ß√£o deve retornar o valor False'
    assert is_odd(2) is False

# Notem que o nome do arquivo de testes possui o prefixo test_ , assim como a defini√ß√£o das fun√ß√µes de teste. Isto √© necess√°rio para que seus testes sejam descobertos pela ferramenta.
# Uma fun√ß√£o de teste √© similar a qualquer outra, por√©m tem o prop√≥sito de verificar se o resultado obtido foi o mesmo do esperado. No c√≥digo isto pode ser visto atrav√©s da utiliza√ß√£o da palavra reservada assert .
# O comando assert funciona da seguinte maneira: caso a express√£o recebida seja verdadeira (avaliada como True ), nada acontece, por√©m caso seja falsa (avaliada como False ), uma exce√ß√£o do tipo AssertionError √© lan√ßada. A pytest captura este erro e tenta apresentar uma compara√ß√£o entre o esperado e o recebido da melhor maneira poss√≠vel.
# Digite algumas opera√ß√µes b√°sicas como adi√ß√µes e multiplica√ß√µes e veja que o valor ser√° avaliado e impresso.

 2 * 3  # sa√≠da: 6
 2 + 3  # sa√≠da: 5
 3 / 2  # sa√≠da: 1.5

#  Para atribuir esses valores a um nome, basta utilizar o operador de atribui√ß√£o = .

square_root = 25 ** (1/2)  # raiz quadrada de 25. O operador `**` significa "elevado a"

print(square_root + 1)  # sa√≠da: 6.0

# N√£o √© necess√°rio a utiliza√ß√£o de let , var ou const nas atribui√ß√µes. Veremos escopo e quest√µes de mutabilidade mais adiante.
# Mas existe algum operador que Python n√£o tenha? E se eu tentar incrementar um valor?

counter = 0
# counter++  # esse c√≥digo vai falhar

# Ainda que possamos simplificar opera√ß√µes e atribui√ß√µes, o incremento ou decremento n√£o √© v√°lido na sintaxe ++ , -- .
# Um exemplo de simplifica√ß√£o v√°lida √©:

# original
counter = counter + 1

# simplificado
counter += 1

# Um outro operador que pode ser um pouco diferente √© o // . Consegue imaginar para que serve?

3 // 2  # sa√≠da: 1
3 / 2  # sa√≠da: 1.5

# O operador // realiza a divis√£o e arredonda o resultado para baixo. Ou seja, realiza o quociente.
# Hummm... Tirando o let e var , ainda parece bem similar com Javascript .ü§î
# De fato, operadores s√£o comuns a todas as linguagens de programa√ß√£o, por isso tamanha semelhan√ßa.
# Por√©m, nem tudo √© t√£o semelhante. Se realizarmos a opera√ß√£o de compara√ß√£o entre '1' == 1 , o resultado ser√° falso ( False ), pois como s√£o valores de tipos diferentes, nenhuma convers√£o √© realizada.
# Dado as listas a = [1, 2, 3] e b = [1, 2, 3] , se compararmos as duas a == b teremos como retorno True , ainda que representem listas diferentes.
# Acho que "Python" != "Javascript" , ainda que tenham suas similaridades. üòÖ
# Mas e sobre os operadores && e || , n√£o s√£o opera√ß√µes de and e or ?
# Quando queremos fazer opera√ß√µes l√≥gicas, como verificar se uma temperatura est√° entre dois valores, utilizamos o operador and . Ou seja, para verificar se uma temperatura √© menor que 25 graus e maior que 18 graus, podemos fazer algo como temperatura < 25 and temperatura > 18 . Embora uma maneira mais pythonica de se escrever esta opera√ß√£o seja 18 < temperatura < 25 . ü§ì
# Assim como podemos validar intervalos utilizando o operador or . Por exemplo, se em um parque pessoas com idade menor ou igual a 5 e maiores de 65 anos n√£o pagam, poder√≠amos escrever uma valida√ß√£o da seguinte maneira idade <= 5 or idade >= 65 .


# Exerc√≠cio 1: No terminal, inicialize duas vari√°veis a e b, sendo a = 10 e b = 5. Mostre o resultado das 7 opera√ß√µes b√°sicas (soma, subtra√ß√£o, multiplica√ß√£o, divis√£o, divis√£o inteira, potencia√ß√£o e m√≥dulo) envolvendo essas vari√°veis.
a = 10
b = 5
a + b # 15 soma
a - b # 5  subtra√ß√£o
a * b # 50 multiplica√ß√£o
a / b # 2.0  divis√£o
a // b # 2 divis√£o inteira
a ** b # 100000 potencia√ß√£o
a % b # 0 m√≥dulo
# Exerc√≠cio 2: Declare e inicialize uma vari√°vel: hours = 6 . Quantos minutos t√™m em 6 horas? E quantos segundos? Declare e inicialize vari√°veis minutes e seconds que recebem os respectivos resultados das contas. Depois, imprima cada uma delas.
hours = 6
minutes = hours * 60 # 360
seconds = minutes * 60 # 21600
# Exerc√≠cio 3: Teste e verifique o que acontece se voc√™ colocar um ponto e v√≠rgula no final de uma instru√ß√£o em Python.
1 + 1; ola = 8
# Exerc√≠cio 4: Suponha que o pre√ßo de capa de um livro seja 24,20, mas as livrarias recebem um desconto de 40%. O transporte custa 3,00 para o primeiro exemplar e 75 centavos para cada exemplar adicional. Qual √© o custo total de atacado para 60 c√≥pias? Escreva uma express√£o que receba o custo total e a imprima.
# porcentagem >> 0.4 * 24,20
#  1 = 100%, 0.4 = 40%
books = 60
book_price = (1 - 0.4) * 24.20 #14,52
logistic = 3 + (books - 1) * 0.75
cost = books * book_price + logistic
cost
